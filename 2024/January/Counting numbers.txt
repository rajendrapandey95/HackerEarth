Function lower_bound(first, last, right, K, L):
    while last - first > 0:
        m = (first + last) / 2
        if max(m, K + p[m - 1] - right) < L:
            first = m + 1
        else:
            last = m
    return first

Function G(left, right, K, L):
    for i = 9 to 0 step -1:
        min_pos = lower_bound(pos[i].begin(), pos[i].end(), left)
        max_pos = upper_bound(pos[i].begin(), pos[i].end(), right)
        p = min_pos
        c = max_pos - min_pos

        if c > 0:
            Declare an array t of size c+1
            t[1] = max(1, K + p[0] - right)

            if t[1] > L:
                return G(left, p[0] - 1, t[1] - 1, L)

            t[c] = max(c, K + p[c - 1] - right)

            if t[c] < L:
                return G(p[c - 1] + 1, right, K - t[c], L)

            j = lower_bound(1, c+1, right, K, L)
            t[j] = max(j, K + p[j - 1] - right)
            t[j-1] = max(j-1, K + p[j - 2] - right)

            if t[j] == L:
                return i
            else:
                return G(p[j - 2] + 1, p[j - 1] - 1, t[j] - t[j - 1] - 1, L - t[j - 1])

Function main():
    Read input string x
    n = size of x

    for i = 1 to n:
        Append i to pos[x[i-1]-'0']

    Read input m
    for i = 0 to m-1:
        Read k, l
        Print G(1, n, k, l)

    Print newline
