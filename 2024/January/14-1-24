import sys
from typing import List, Tuple

def gcd(a, b):
    return a if b == 0 else gcd(b, a % b)

def lcm(a, b):
    return a * (b // gcd(a, b))

def mod_exp(b, p, m):
    x = 1
    while p:
        if p & 1:
            x = (x * b) % m
        b = (b * b) % m
        p >>= 1
    return x

def invFermat(a, p):
    return mod_exp(a, p - 2, p)

def exp(b, p):
    x = 1
    while p:
        if p & 1:
            x = (x * b)
        b = (b * b)
        p >>= 1
    return x

def dfs(v, p, edges, visited, tin, low, timer, bridgelen):
    visited[v] = True
    tin[v] = low[v] = timer[0]
    timer[0] += 1

    for to in edges[v]:
        if to[0] == p:
            continue
        if visited[to[0]]:
            low[v] = min(low[v], tin[to[0]])
        else:
            dfs(to[0], v, edges, visited, tin, low, timer, bridgelen)
            low[v] = min(low[v], low[to[0]])
            if low[to[0]] > tin[v]:
                bridgelen.append(to[1])

def find_bridges(n, edges):
    timer = [0]
    visited = [False] * n
    tin = [-1] * n
    low = [-1] * n
    bridgelen = []
    
    for i in range(n):
        if not visited[i]:
            dfs(i, -1, edges, visited, tin, low, timer, bridgelen)

    return bridgelen

def solve():
    n, m = map(int, input().split())
    edges = [[] for _ in range(3 * 10**5 + 5)]
    bridgelen = []

    me = list(map(int, input().split()))

    for i in range(m):
        x, y = map(int, input().split())
        x -= 1
        y -= 1
        edges[x].append((y, me[i]))
        edges[y].append((x, me[i]))

    bridgelen = find_bridges(n, edges)

    bridgelen.sort()
    minm1, minm2 = 0, 0
    ok = 0

    for x in bridgelen:
        if not ok:
            minm1 += x
        else:
            minm2 += x
        ok ^= 1

    maxm1, maxm2 = 0, 0
    ok = 0

    bridgelen.reverse()

    for x in bridgelen:
        if not ok:
            maxm1 += x
        else:
            maxm2 += x
        ok ^= 1

    maxm1 = max(maxm1, maxm2)
    minm1 = min(minm1, minm2)

    print(maxm1, minm1)

if __name__ == "__main__":
   

    solve()
