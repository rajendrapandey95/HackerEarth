function sq(a: double) -> double:
    return a * a

function dist(p1: array<double, 3>, v1: array<double, 3>, p2: array<double, 3>, v2: array<double, 3>, t: double) -> double:
    ret = 0
    for i = 0 to 2:
        u = p1[i] + t * v1[i]
        v = p2[i] + t * v2[i]
        ret += sq(u - v)
    return ret

function main():
    t: int
    cin >> t
    masao_pts: array<double, 3>
    masao_vel: array<double, 3>
    bo_pts: array<double, 3>
    bo_vel: array<double, 3>

    for i = 0 to 2:
        cin >> masao_pts[i]
    for i = 0 to 2:
        cin >> masao_vel[i]
    for i = 0 to 2:
        cin >> bo_pts[i]
    for i = 0 to 2:
        cin >> bo_vel[i]

    l = 0
    r = t
    for lp = 0 to 999:
        t1 = l + (r - l) / 3
        t2 = l + 2 * (r - l) / 3

        d1 = dist(masao_pts, masao_vel, bo_pts, bo_vel, t1)
        d2 = dist(masao_pts, masao_vel, bo_pts, bo_vel, t2)

        if d2 < d1:
            l = l + (r - l) / 3
        else if d2 > d1:
            r = l + 2 * (r - l) / 3
        else:
            l = l + (r - l) / 3
            r = l + 2 * (r - l) / 3

    d = dist(masao_pts, masao_vel, bo_pts, bo_vel, l)

    ans = sqrt(d)
    cout << fixed
    cout.precision(6)
    cout << ans << endl
